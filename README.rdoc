= EnumHelper

For columns in Rails models (or attributes in any class) this plugin provides
support for enumerated values including:

* defining constants
* defining predicate methods
* defining other constants
* defining other related methods
* specifying Rails <tt>validates_inclusion_of</tt> validation

Other enum-related plugins that might be a better fit for your needs:
* jamesgolick's {http://github.com/jamesgolick/enum_field enum_field}
* paraseba's {http://github.com/paraseba/enum_field enum_field}
* binarylogic's {http://github.com/binarylogic/enumlogic enumlogic}
* jeffp's {http://github.com/jeffp/enumerated_attribute enumerated_attribute}

== Documentation

Complete documentation at {EnumHelper::ClassMethods#enum_helper}

== Example

  class Person < ActiveRecord::Base
    enum_helper :sex, %w(male female)
  end

  # constants

  Person::SEXES       #=> ["male", "female"]
  Person::SEX_MALE    #=> "male"
  Person::SEX_FEMALE  #=> "female"

  guy = Person.new(:sex => SEX_MALE)  #=> #<Person id: nil, sex: "male">

  # predicate methods

  guy.sex_male?                     #=> true
  guy.sex_female?                   #=> false

  # validates_inclusion_of by default

  guy.valid?           #=> true
  guy.status = 'foo'
  guy.valid?           #=> false
  
== Tip

If you are having trouble figuring out what constants and methods are getting generated, try:

  MyClass.constants
  MyClass.new.methods

or if too much is returned:

  MyClass.constants.grep(/<search term>/i).sort
  MyClass.new.methods.grep(/<search term>/i).sort

== TODO

* support: not_foo? not 'foo'
* enum_select(:field)
* valid? / :allow_nil => true/false

== Copyright

Copyright (c) 2010 Steve Downey, released under the MIT license
